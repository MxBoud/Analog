using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;


public class GameController : MonoBehaviour {

	public int instrumentSelector = 0; // 0 = volmeter, 1= amperemeter 


    public GameObject startupPanel; // Panel that gives initial intructions;

    public InputField measurementField; // For user input
	public InputField uncertaintyField; 

	public Text messageField; // For now, all retroactio to user goes there

	public Text voltmeterScoreText; 
	public Text ammeterScoreText;

	private float voltmeterScore = 0;
	private float ammeterScore = 0;

	public float inputVoltage; // Random value generated by this script that the 
       //user needs to find by applying correct measurement method
	public float inputCurrent; 


    //GameObjects for the voltmeter and the ammeter;
	public InstrumentController voltmeterController; 
	public InstrumentController ammeterController; 





	// Use this for initialization
	void Start () {
        //Plug a new random current and voltage for the user to measure. 
		newRandomVoltage (); 
		newRandomCurrent (); 
	}




	//TO DO : Build a better parsing algorithm. 
	public void checkUserSubmission(){
		float measurementSubmitted; 
		float uncertaintySubmitted; 

        //The measurement parsor class use a more complexified parsor algorithm 
        //to apply the differents rules needed so that a measurement is correctly
        //written. In case of a mistake, the public string "outputMessage" gives instructions to correct the input. 

        MeasurementParsor measurementParsor = new MeasurementParsor(measurementField.text, uncertaintyField.text);
        measurementSubmitted = measurementParsor.mResult; //If there's a error, it will be null. 
        uncertaintySubmitted = measurementParsor.uResult;

        if (!measurementParsor.parseSuccess){
            //If the submitted value doesn't respect measurement convention.
            messageField.text = measurementParsor.outputMessage;
            return;
        }
		if (instrumentSelector == 0) {//Volmeter) 
			validateVoltageSubmission (measurementSubmitted,uncertaintySubmitted);

		} else if (instrumentSelector == 1) { //Ammmeter 
			validateCurrentSubmission(measurementSubmitted,uncertaintySubmitted) ; 
		}
	}

	void validateVoltageSubmission(float voltageSubmitted, float uncertaintySubmitted) {
		//Validate answer
		if (inputVoltage < 3) {
			if (voltmeterController.scaleID != 1) {
				messageField.text = "Vous n'avez pas la bonne échelle :("; 
				updateVolmeterScore (-10);
				return;
			}
			if (uncertaintySubmitted != 0.06f) {
				messageField.text = "Mauvaise incertitude :("; 
				updateVolmeterScore (-10);
				return;
			}

			if (Mathf.Abs (inputVoltage - voltageSubmitted) > 0.06) {
				messageField.text = "Mauvaise mesure :("; 
				updateVolmeterScore (-10);
				return;
			}

		} else if (inputVoltage >= 3 && inputVoltage < 15) {
			if (voltmeterController.scaleID != 2) {
				messageField.text = "Vous n'avez pas la bonne échelle :("; 
				updateVolmeterScore (-10);
				return;
			}
			if (uncertaintySubmitted != 0.3f) {
				messageField.text = "Mauvaise incertitude :("; 
				updateVolmeterScore (-10);
			}

			if (Mathf.Abs (inputVoltage - voltageSubmitted) > 0.3) {
				messageField.text = "Mauvaise mesure :("; 
				updateVolmeterScore (-10);
				return;
			}
		} else if (inputVoltage >= 15) {
			if (voltmeterController.scaleID != 3) {
				messageField.text = "Vous n'avez pas la bonne échelle :("; 
				updateVolmeterScore (-10);
				return;
			}
			if (uncertaintySubmitted != 0.6f) {
				messageField.text = "Mauvaise incertitude :("; 
				updateVolmeterScore (-10);
				return;
			}
			if (Mathf.Abs (inputVoltage - voltageSubmitted) > 0.6) {
				messageField.text = "Mauvaise mesure :("; 
				updateVolmeterScore (-10);
				return;
			}
		}
		messageField.text = "Bonne réponse!  Passez à la prochaine mesure :)"; 
		updateVolmeterScore (10);
		newRandomVoltage (); 
	}
	void validateCurrentSubmission(float currentSubmitted, float uncertaintySubmitted)
	{
		//Validate answer
		if (inputCurrent < 0.05f)
		{
			if (ammeterController.scaleID != 1)
			{
				messageField.text = "Vous n'avez pas la bonne échelle :(";
				updateAmmeterScore(-10);
				return;
			}
			if (uncertaintySubmitted != 0.001f)
			{
				messageField.text = "Mauvaise incertitude :(";
				updateAmmeterScore(-10);
				return;
			}

			if (Mathf.Abs(inputCurrent - currentSubmitted) > 0.001f)
			{
				messageField.text = "Mauvaise mesure :(";
				updateAmmeterScore(-10);
				return;
			}

		}
		else if (inputCurrent >= 0.05f && inputCurrent < 0.5f)
		{
			if (ammeterController.scaleID != 2)
			{
				messageField.text = "Vous n'avez pas la bonne échelle :(";
				updateAmmeterScore(-10);
				return;
			}
			if (uncertaintySubmitted != 0.01f)
			{
				messageField.text = "Mauvaise incertitude :(";
				updateAmmeterScore(-10);
			}

			if (Mathf.Abs(inputCurrent - currentSubmitted) > 0.01f)
			{
				messageField.text = "Mauvaise mesure :(";
				updateAmmeterScore(-10);
				return;
			}
		}
		else if (inputVoltage >= 0.5)
		{
			if (ammeterController.scaleID != 3)
			{
				messageField.text = "Vous n'avez pas la bonne échelle :(";
				updateAmmeterScore(-10);
				return;
			}
			if (uncertaintySubmitted != 0.1f)
			{
				messageField.text = "Mauvaise incertitude :(";
				updateAmmeterScore(-10);
				return;
			}
			if (Mathf.Abs(inputCurrent - currentSubmitted) > 0.1f)
			{
				messageField.text = "Mauvaise mesure :(";
				updateAmmeterScore(-10);
				return;
			}
		}
		messageField.text = "Bonne réponse!  Passez à la prochaine mesure :)";
		updateAmmeterScore(10);
		newRandomCurrent();
	}

	void newRandomVoltage() {//Assign a new random voltage and update the voltmeter controller
		int range = Random.Range(0, 3);

		if (range == 0)
		{
			inputVoltage = Random.Range(0.00f, 3.00f);
		}
		else if (range == 1)
		{
			inputVoltage = Random.Range(3.00f, 15.0f);
		}
		else
		{
			inputVoltage = Random.Range(15.0f, 30.0f);
		}

		
		voltmeterController.inputToInstrument = inputVoltage; 
	}

	
	void newRandomCurrent() {//Assign a new random current and update the current controller
        int range = Random.Range(0, 3);

        if (range ==0) {
            inputCurrent = Random.Range(0.00f, 0.05f);
		}
        else if (range ==1){
            inputCurrent = Random.Range(0.05f, 0.5f);
        }
        else {
            inputCurrent = Random.Range(0.5f, 5.0f);
		}
		
		ammeterController.inputToInstrument = inputCurrent; 
	}

	void updateVolmeterScore (int increment) {
		voltmeterScore = Mathf.Clamp(voltmeterScore + increment,0f,1e10f); 
		voltmeterScoreText.text = "Score voltmètre = " + voltmeterScore.ToString();

	}
	void updateAmmeterScore (int increment) {
		ammeterScore = Mathf.Clamp(ammeterScore + increment,0f,1e10f); 
		ammeterScoreText.text = "Score ampèremètre = " + ammeterScore.ToString();

	}


	public void disableStartupPanel(){
		startupPanel.SetActive (false);
        newRandomVoltage();
        newRandomCurrent();
	}
}
